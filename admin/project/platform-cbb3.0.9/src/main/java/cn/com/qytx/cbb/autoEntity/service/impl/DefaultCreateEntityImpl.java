package cn.com.qytx.cbb.autoEntity.service.impl;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Iterator;

import javax.tools.JavaCompiler;
import javax.tools.JavaCompiler.CompilationTask;
import javax.tools.JavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;

import org.springframework.stereotype.Service;

import cn.com.qytx.cbb.autoEntity.service.AutoCreateEntityService;

@Service
public class DefaultCreateEntityImpl implements AutoCreateEntityService {

	@Override
	public File createEntity(Object info) {
		// TODO Auto-generated method stub
		System.out.println("已创建Java文件:/autoGenerateDomain/Citys.java");
		return new File(this.getClass().getResource("/autoGenerateDomain/Citys.java").getFile());
	}

	@Override
	public Class compileFile(File f) {
		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
		StandardJavaFileManager javaFileManager = compiler.getStandardFileManager(null, null, null);
		
		Iterable<? extends JavaFileObject> compilationUnits1 =
				javaFileManager.getJavaFileObjectsFromFiles(Arrays.asList(f));
		
		String cp = this.getClass().getResource("/").getFile();
		int index = cp.indexOf("/WEB-INF/classes");
		String jarpath = cp.substring(0, index+8)+"/lib";
		String jars = getJarFiles(jarpath);
		Iterable<String> operations = Arrays.asList("-d",cp,"-cp",cp,"-classpath",jars);
		CompilationTask task = compiler.getTask(null, javaFileManager, null, operations, null, compilationUnits1);
		if(task.call()){
			try {
				javaFileManager.close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			ClassLoader cl = this.getClass().getClassLoader();
			try {
				Class r = cl.loadClass("autoGenerateDomain.Citys");
				return r;
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	/**
	 * 
	 * @param jarPath
	 * @return
	 */
	private String getJarFiles(String jarPath){
		File f = new File(jarPath);
		final StringBuffer result = new StringBuffer("");
		if(f.exists() && f.isDirectory()){
			File[] fs = f.listFiles(new FileFilter() {
				
				@Override
				public boolean accept(File pathname) {
					// TODO Auto-generated method stub
					if(pathname.isDirectory()){
						return true;
					}else{
						String temp = pathname.getName();
						if(temp.endsWith(".jar")){
							result.append(pathname.getPath()+";");
						}
					}
					return false;
				}
			});
		}
		return result.toString();
	}
	
}
